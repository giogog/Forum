@page "/{ForumPage:int?}/{ForumId:int}/topics/{TopicPage:int?}/topic/{TopicId:int}"
@using Microsoft.AspNetCore.Components.Authorization
@inject ITopicService TopicService
@inject IAuthenticationService AuthService
@inject IJwtService JwtService
@inject IUpvoteService UpvoteService
@inject ICommentService CommentService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Topic Details</PageTitle>

@if (Topic != null)
{
    <div class="topic">
        <button class="go-back" @onclick="NavigateBack">
            <span class="arrow">&#8592;</span> <!-- Unicode left arrow -->
            Go Back
        </button>
        @if (editTopicBodies.ContainsKey(Topic.Id))
        {
            <div class="edit-topic">
                <textarea class="edit-title" @bind="editTopicTitles[Topic.Id]"></textarea>
                <textarea class="edit-body" @bind="editTopicBodies[Topic.Id]"></textarea>
                <div class="edit-buttons">
                    <button class="btn-submit" @onclick="() => SubmitTopicEdit(Topic.Id)">Submit</button>
                    <button class="btn-cancel" @onclick="() => CancelTopicEdit(Topic.Id)">Cancel</button>
                </div>
            </div>
        }
        else
        {
            <TopicInfo Topic="Topic" />
            <TopicButtons Topic="Topic"
                          NavigateToLogin="NavigateToLogin" OnDeleteTopic="ConfirmDeleteTopic" OnToggleEditTopic="StartEditingTopic"
                          OnUpVote="UpvoteTopic" UserId="UserId" InDetailedView="false" />
        }

        @if (showAddComment.Contains(TopicId))
        {
            @if (Topic.Status == Status.Active)
            {
                <AuthorizeView>
                    <Authorized>
                        <div class="add-comment">
                            <label>Add Comment</label>
                            <textarea @bind="commentBodies[TopicId]"></textarea>
                            <button @onclick="() => SubmitComment(TopicId)">Submit</button>
                        </div>
                    </Authorized>
                </AuthorizeView>
            }
        }

        <div class="comments">
            @if (Comments != null && Comments.Any())
            {
                @foreach (var comment in Comments.OrderByDescending(c => c.Created))
                {
                    <div class="comment">
                        <div class="comment-header">
                            <div class="author-info">
                                @if (comment.Type == CommentType.Comment)
                                {
                                    <span class="posted-by">Commented by @comment.Username</span>
                                }
                                else
                                {
                                    <span class="posted-by">Replied by @comment.Username to @GetUsernameFromComments(comment.ParentCommentId)</span>
                                    <div class="replied-comment">
                                        <p>@Comments.First(c => c.Id == comment.ParentCommentId).Body</p>
                                    </div>
                                }
                                <span class="posted-date">@comment.Created.ToString("dd-MM-yyyy HH:mm")</span>
                            </div>
                        </div>

                        @if (editCommentBodies.ContainsKey(comment.Id))
                        {
                            <textarea @bind="editCommentBodies[comment.Id]"></textarea>
                            <div class="comment-buttons">
                                <button class="submit" @onclick="() => SubmitCommentEdit(comment.Id)">Submit</button>
                                <button class="cancel" @onclick="() => CancelCommentEdit(comment.Id)">Cancel</button>
                            </div>
                        }
                        else
                        {
                            <p>@comment.Body</p>
                            @if (Topic.Status == Status.Active)
                            {
                                <AuthorizeView>
                                    <Authorized>
                                        <div class="comment-footer">
                                            <button class="reply" @onclick="() => ToggleAddReply(comment.Id)">Reply</button>
                                            @if (UserId == comment.UserId)
                                            {
                                                <button class="edit" @onclick="() => StartEditingComment(comment)">Edit</button>
                                                <button class="delete" @onclick="() => ConfirmDeleteComment(comment.Id)">Delete</button>
                                            }
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                            }
                        }
                    </div>

                    @if (showAddReply.Contains(comment.Id))
                    {
                        @if (Topic.Status == Status.Active)
                        {
                            <AuthorizeView>
                                <Authorized>
                                    <div class="add-reply">
                                        <label>Reply Comment</label>
                                        <textarea @bind="replyBodies[comment.Id]"></textarea>
                                        <button @onclick="() => SubmitReply(comment.Id, TopicId)">Submit</button>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        }
                    }
                }
            }
            else if (ErrorMessage != null)
            {
                <p>@ErrorMessage</p>
            }
            else
            {
                <p>No comments yet.</p>
            }
        </div>
        <PaginationNav TotalPages="TotalPages" CurrentPage="CommentPage" OnPageChanged="NavigateToPage" />
    </div>
}


@code {
    [Parameter] public int ForumPage { get; set; }
    [Parameter] public int ForumId { get; set; }
    [Parameter] public int TopicPage { get; set; }
    [Parameter] public int LastPage { get; set; }
    [Parameter] public int TopicId { get; set; }
    
    private int CommentPage;
    private int TotalPages;
    private TopicResult? Topic;
    private IEnumerable<CommentResult>? Comments;
    private HashSet<int> showAddReply = new HashSet<int>();
    private HashSet<int> showAddComment = new HashSet<int>();
    private Dictionary<int, string> commentBodies = new Dictionary<int, string>();
    private Dictionary<int, string> replyBodies = new Dictionary<int, string>();
    private Dictionary<int, string> editCommentBodies = new Dictionary<int, string>();
    private Dictionary<int, string> editTopicTitles = new Dictionary<int, string>();
    private Dictionary<int, string> editTopicBodies = new Dictionary<int, string>();
    private string? ErrorMessage;
    private bool IsAuthenticated;
    private int? UserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthService.GetAuthenticationStateAsync();
        IsAuthenticated = authState.User.Identity.IsAuthenticated;
        UserId = IsAuthenticated ? JwtService.GetIdFromClaims(authState.User.Claims) : (int?)null;

        showAddComment.Add(TopicId);
        commentBodies[TopicId] = string.Empty;
        CommentPage = 1;
        await LoadData();
        TotalPages = 1;
    }

    private async Task NavigateToPage(int page)
    {
        CommentPage = page;
        await LoadComments();
    }

    private string GetUsernameFromComments(int? id)
    {
        return id == null ? "" : Comments.First(c => c.Id == id).Username;
    }

    private async Task LoadData()
    {
        await LoadTopicDetails();
        await LoadComments();
    }

    private async Task LoadComments()
    {
        var response = await CommentService.GetComments(TopicId, CommentPage);
        if (response.IsSuccess)
        {
            Comments = response.Result;
            TotalPages = response.TotalPages;
        }
        else
        {
            Comments = null;
        }
    }

    private async Task LoadTopicDetails()
    {
        var response = await TopicService.GetTopicById(TopicId);
        if (response.IsSuccess)
        {
            Topic = response.Result;
        }
        else
        {
            ErrorMessage = response.Message;
        }
    }

    private void ToggleAddReply(int parentCommentId)
    {
        if (showAddReply.Contains(parentCommentId))
        {
            showAddReply.Remove(parentCommentId);
        }
        else
        {
            showAddReply.Add(parentCommentId);
            if (!replyBodies.ContainsKey(parentCommentId))
            {
                replyBodies[parentCommentId] = string.Empty;
            }
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo($"/{ForumPage}/{ForumId}/topics/{TopicPage}");
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private async Task SubmitComment(int topicId)
    {
        if (commentBodies.TryGetValue(topicId, out var commentBody) && !string.IsNullOrWhiteSpace(commentBody))
        {
            var createCommentDto = new AddCommentModelDto(null, topicId, commentBody);
            var result = await CommentService.AddComment(createCommentDto);
            if (result.IsSuccess)
            {
                await LoadData();
                commentBodies[topicId] = string.Empty;
            }
            else
            {
                await LoadTopicDetails();
            }
        }
    }

    private async Task SubmitReply(int parentCommentId, int topicId)
    {
        if (replyBodies.TryGetValue(parentCommentId, out var commentBody) && !string.IsNullOrWhiteSpace(commentBody))
        {
            var createCommentDto = new AddCommentModelDto(parentCommentId, topicId, commentBody);
            var result = await CommentService.AddReply(createCommentDto);
            if (result.IsSuccess)
            {
                await LoadData();
                replyBodies[parentCommentId] = string.Empty;
                showAddReply.Remove(parentCommentId);
            }
            else
            {
                await LoadData();
            }
        }
    }

    private void StartEditingComment(CommentResult comment)
    {
        editCommentBodies[comment.Id] = comment.Body;
    }

    private void CancelCommentEdit(int commentId)
    {
        editCommentBodies.Remove(commentId);
    }

    private async Task SubmitCommentEdit(int commentId)
    {
        if (editCommentBodies.TryGetValue(commentId, out var editedBody) && !string.IsNullOrWhiteSpace(editedBody))
        {
            var result = await CommentService.EditComment(commentId, new UpdateCommentModelDto(editedBody));
            if (result.IsSuccess)
            {
                editCommentBodies.Remove(commentId);
                await LoadData();
            }
            else
            {
                await LoadData();
            }
        }
    }

    private async Task StartEditingTopic(UpdateTopicModelDto updateTopicModelDto)
    {
        editTopicTitles[updateTopicModelDto.id] = updateTopicModelDto.Title;
        editTopicBodies[updateTopicModelDto.id] = updateTopicModelDto.body;
    }

    private void CancelTopicEdit(int topicId)
    {
        editTopicBodies.Remove(topicId);
    }

    private async Task SubmitTopicEdit(int topicId)
    {
        if (editTopicTitles.TryGetValue(topicId, out var editedTitle) && !string.IsNullOrEmpty(editedTitle) && editTopicBodies.TryGetValue(topicId, out var editedBody) && !string.IsNullOrEmpty(editedBody))
        {
            var result = await TopicService.EditTopic(new UpdateTopicModelDto(topicId, editedTitle, editedBody));
            if (result.IsSuccess)
            {
                editTopicBodies.Remove(topicId);
                await LoadData();
            }
            else
            {
                ErrorMessage = result.Message;
            }
        }
    }

    private async Task ConfirmDeleteComment(int commentId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
        if (confirmed)
        {
            await DeleteComment(commentId);
        }
    }

    private async Task DeleteComment(int commentId)
    {
        await CommentService.DeleteComment(commentId);
        await LoadData();
    }

    private async Task ConfirmDeleteTopic(int topicId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this Topic?");
        if (confirmed)
        {
            await DeleteTopic(topicId);
        }
    }

    private async Task DeleteTopic(int topicId)
    {
        var result = await TopicService.DeleteTopic(topicId);
        if (result.IsSuccess)
        {
            NavigateBack();
        }
        else
        {
            ErrorMessage = result.Message;
        }
    }

    private async Task UpvoteTopic(int topicId)
    {
        var result = await UpvoteService.Upvote(topicId);
        if (result.IsSuccess)
        {
            await LoadTopicDetails();
        }
        else
        {
            ErrorMessage = result.Message;
        }
    }
}
@* @page "/{ForumPage:int}/{ForumId:int}/topics/{TopicPage:int}/topic/{TopicId:int}"
@using Microsoft.AspNetCore.Components.Authorization
@inject ITopicService TopicService
@inject IAuthenticationService AuthService
@inject IJwtService JwtService
@inject IUpvoteService UpvoteService
@inject ICommentService CommentService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Topic Details</PageTitle>

@if (Topic != null)
{
    <div class="topic">
        <button class="go-back" @onclick="GoBack">
            <span class="arrow">&#8592;</span> <!-- Unicode left arrow -->
            Go Back
        </button>
        @if (editTopicBodies.ContainsKey(Topic.Id))
        {
            <div class="edit-topic">
                <textarea class="edit-title" @bind="editTopicTitles[Topic.Id]"></textarea>
                <textarea class="edit-body" @bind="editTopicBodies[Topic.Id]"></textarea>
                <div class="edit-buttons">
                    <button class="btn-submit" @onclick="() => SubmitEditTopic(Topic.Id)">Submit</button>
                    <button class="btn-cancel" @onclick="() => CancelEditTopic(Topic.Id)">Cancel</button>
                </div>
            </div>
        }
        else
        {
            <TopicInfo Topic="Topic" />
            <TopicButtons Topic="Topic"
                          NavigateToLogin="NavigateToLogin" OnDeleteTopic="ConfirmDeleteTopic" OnToggleEditTopic="EditTopic"
                          OnUpVote="UpVote" UserId="userId" InDetailedView="false" />
        }


        @if (showAddComment.Contains(TopicId))
        {
            @if (Topic.Status == Status.Active)
            {
                <AuthorizeView>
                    <Authorized>
                        <div class="add-comment">
                            <label>Add Comment</label>
                            <textarea @bind="commentBodies[TopicId]"></textarea>
                            <button @onclick="() => SubmitComment(TopicId)">Submit</button>
                        </div>
                    </Authorized>
                </AuthorizeView>
            }
        }

        <div class="comments">
            @if (Comments != null && Comments.Any())
            {
                @foreach (var comment in Comments.OrderByDescending(c => c.Created))
                {
                    <div class="comment">
                        <div class="comment-header">
                            <div class="author-info">
                                @if (comment.Type == CommentType.Comment)
                                {
                                    <span class="posted-by">Commented by @comment.Username</span>
                                }
                                else
                                {
                                    <span class="posted-by">Replied by @comment.Username to @GetUsernameFromComments(comment.ParentCommentId)</span>
                                    <div class="replied-comment">
                                        <p>@Comments.First(c => c.Id == comment.ParentCommentId).Body</p>
                                    </div>
                                }
                                <span class="posted-date">@comment.Created.ToString("dd-MM-yyyy HH:mm")</span>
                            </div>
                        </div>

                        @if (editCommentBodies.ContainsKey(comment.Id))
                        {
                            <textarea @bind="editCommentBodies[comment.Id]"></textarea>
                            <div class="comment-buttons">
                                <button class="submit" @onclick="() => SubmitEditComment(comment.Id)">Submit</button>
                                <button class="cancel" @onclick="() => CancelEdit(comment.Id)">Cancel</button>
                            </div>
                        }
                        else
                        {
                            <p>@comment.Body</p>
                            @if (Topic.Status == Status.Active)
                            {
                                <AuthorizeView>
                                    <Authorized>
                                        <div class="comment-footer">
                                            <button class="reply" @onclick="() => ToggleAddReply(comment.Id)">Reply</button>
                                            @if (userId == comment.UserId)
                                            {
                                                <button class="edit" @onclick="() => EditComment(comment)">Edit</button>
                                                <button class="delete" @onclick="() => ConfirmDeleteComment(comment.Id)">Delete</button>
                                            }
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                            }
                        }
                    </div>

                    @if (showAddReply.Contains(comment.Id))
                    {
                        @if (Topic.Status == Status.Active)
                        {
                            <AuthorizeView>
                                <Authorized>
                                    <div class="add-reply">
                                        <label>Reply Comment</label>
                                        <textarea @bind="replyBodies[comment.Id]"></textarea>
                                        <button @onclick="() => SubmitReply(comment.Id, TopicId)">Submit</button>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        }
                    }
                }
            }
            else if (errorMessage != null)
            {
                <p>@errorMessage</p>
            }
            else
            {
                <p>No comments yet.</p>
            }
        </div>
        <nav aria-label="Topic navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item @(CommentPage == 1 ? "disabled" : "")">
                    <button class="page-link" disabled="@(CommentPage == 1)" @onclick="@(CommentPage == 1 ? null : (() => NavigateToPage(CommentPage - 1)))">Previous</button>
                </li>

                @for (int i = 1; i <= TotalPages; i++)
                {
                    int localPageNumber = i;
                    <li class="page-item @(CommentPage == localPageNumber ? "active" : "")">
                        <button class="page-link" @onclick="(() => NavigateToPage(localPageNumber))">@localPageNumber</button>
                    </li>
                }

                <li class="page-item @(CommentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" disabled="@(CommentPage == TotalPages)" @onclick="@(CommentPage == TotalPages ? null : (() => NavigateToPage(CommentPage + 1)))">Next</button>
                </li>
            </ul>
        </nav>

    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter] public int ForumPage { get; set; }
    [Parameter] public int ForumId { get; set; }
    [Parameter] public int TopicPage { get; set; }
    [Parameter] public int LastPage { get; set; }
    [Parameter] public int TopicId { get; set; }
    private int CommentPage;
    private int TotalPages;
    private TopicResult? Topic;
    private IEnumerable<CommentResult>? Comments;
    private HashSet<int> showAddReply = new HashSet<int>();
    private HashSet<int> showAddComment = new HashSet<int>();
    private Dictionary<int, string> commentBodies = new Dictionary<int, string>();
    private Dictionary<int, string> replyBodies = new Dictionary<int, string>();
    private Dictionary<int, string> editCommentBodies = new Dictionary<int, string>();
    private Dictionary<int, string> editTopicTitles = new Dictionary<int, string>();
    private Dictionary<int, string> editTopicBodies = new Dictionary<int, string>();
    private string? errorMessage;
    private bool isAuthenticated;
    private int? userId;



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthService.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity.IsAuthenticated;
        userId = isAuthenticated ? JwtService.GetIdFromClaims(authState.User.Claims) : (int?)null;

        showAddComment.Add(TopicId);
        commentBodies[TopicId] = string.Empty;
        CommentPage = 1;
        await LoadData();
        TotalPages = 1;
    }
    private async Task NavigateToPage(int page)
    {
        CommentPage = page;
        await LoadComments();
    }

    private string GetUsernameFromComments(int? id)
    {
        if (id == null)
            return "";
        return Comments.Where(c => c.Id == id).Select(c => c.Username).First();
    }
    private async Task LoadData()
    {
        await LoadTopicDetails();
        await LoadComments();
    }
    private async Task LoadComments()
    {
        var response = await CommentService.GetComments(TopicId, CommentPage);
        if (response.IsSuccess)
        {
            Comments = response.Result;
            TotalPages = response.TotalPages;
        }
        else
        {
            Comments = null;
        }
    }
    private async Task LoadTopicDetails()
    {
        var response = await TopicService.GetTopicById(TopicId);
        if (response.IsSuccess)
        {
            Topic = response.Result;
        }
        else
        {
            errorMessage = response.Message;
        }
    }

    private void ToggleAddReply(int parentCommentId)
    {
        if (showAddReply.Contains(parentCommentId))
        {
            showAddReply.Remove(parentCommentId);
        }
        else
        {
            showAddReply.Add(parentCommentId);
            if (!replyBodies.ContainsKey(parentCommentId))
            {
                replyBodies[parentCommentId] = string.Empty;
            }
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/{ForumPage}/topics/{LastPage}");
    }
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private async Task SubmitComment(int topicId)
    {
        if (commentBodies.TryGetValue(topicId, out var commentBody) && !string.IsNullOrWhiteSpace(commentBody))
        {
            var createCommentDto = new AddCommentModelDto(null, topicId, commentBody);
            var result = await CommentService.AddComment(createCommentDto);
            if (result.IsSuccess)
            {
                await LoadTopicDetails();
                commentBodies[topicId] = string.Empty;
            }
            else
            {
                await LoadTopicDetails();
            }
        }
    }

    private async Task SubmitReply(int parentCommentId, int topicId)
    {
        if (replyBodies.TryGetValue(parentCommentId, out var commentBody) && !string.IsNullOrWhiteSpace(commentBody))
        {
            var createCommentDto = new AddCommentModelDto(parentCommentId, topicId, commentBody);
            var result = await CommentService.AddReply(createCommentDto);
            if (result.IsSuccess)
            {
                await LoadTopicDetails();
                replyBodies[parentCommentId] = string.Empty;
                showAddReply.Remove(parentCommentId);
            }
            else
            {
                await LoadTopicDetails();
            }
        }
    }

    private void EditComment(CommentResult comment)
    {
        editCommentBodies[comment.Id] = comment.Body;
    }

    private void CancelEdit(int commentId)
    {
        editCommentBodies.Remove(commentId);
    }

    private async Task SubmitEditComment(int commentId)
    {
        if (editCommentBodies.TryGetValue(commentId, out var editedBody) && !string.IsNullOrWhiteSpace(editedBody))
        {
            var result = await CommentService.EditComment(commentId, new UpdateCommentModelDto(editedBody));
            if (result.IsSuccess)
            {
                editCommentBodies.Remove(commentId);
                await LoadTopicDetails();
            }
            else
            {
                await LoadTopicDetails();
            }
        }
    }
    private async Task EditTopic(UpdateTopicModelDto updateTopicModelDto)
    {
        editTopicTitles[updateTopicModelDto.id] = updateTopicModelDto.Title;
        editTopicBodies[updateTopicModelDto.id] = updateTopicModelDto.body;
    }

    private async Task CancelEditTopic(int topicId)
    {
        editTopicBodies.Remove(topicId);
    }

    private async Task SubmitEditTopic(int topicId)
    {
        if (editTopicTitles.TryGetValue(topicId, out var editedTitle) && !string.IsNullOrEmpty(editedTitle) && editTopicBodies.TryGetValue(topicId, out var editedBody) && !string.IsNullOrEmpty(editedBody))
        {
            var result = await TopicService.EditTopic(new UpdateTopicModelDto(topicId, editedTitle, editedBody));
            if (result.IsSuccess)
            {
                editTopicBodies.Remove(topicId);
                await LoadTopicDetails();
            }
            else
            {
                errorMessage = result.Message;
            }
        }
    }

    private async Task ConfirmDeleteComment(int commentId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
        if (confirmed)
        {
            await DeleteComment(commentId);
        }
    }

    private async Task DeleteComment(int commentId)
    {
        var result = await CommentService.DeleteComment(commentId);
        await LoadTopicDetails();
    }

    private async Task ConfirmDeleteTopic(int commentId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this Topic?");
        if (confirmed)
        {
            await DeleteTopic(commentId);
        }
    }

    private async Task DeleteTopic(int topicId)
    {
        var result = await TopicService.DeleteTopic(topicId);
        if (result.IsSuccess)
        {
            GoBack();
        }
        else
        {
            errorMessage = result.Message;
        }
    }
    private async Task UpVote(int topicId)
    {
        var result = await UpvoteService.Upvote(topicId);
        if (result.IsSuccess)
        {
            await LoadTopicDetails();
        }
        else
        {
            errorMessage = result.Message;
        }
    }

}

  *@