@page "/{forumPage:int?}"
@inject IJwtService JwtService
@inject IJSRuntime JSRuntime;
@inject IForumService ForumService
@inject IAuthenticationService AuthService;
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        <CreateForumForm OnValidSubmit="SubmitForum" />
    </Authorized>
    <NotAuthorized>
        <p>Authorize to create Forum</p>
    </NotAuthorized>
</AuthorizeView>

@if (Forums != null && Forums.Any())
{
    @foreach (var forum in Forums)
    {

        <div class="forum">
            @if (editTopicTitles.ContainsKey(forum.Id))
            {
                <div class="edit-forum">
                    <textarea class="edit-title" @bind="editTopicTitles[forum.Id]"></textarea>
                    <div class="edit-buttons">
                        <button class="btn-submit" @onclick="() => SubmitEditForum(forum.Id)">Submit</button>
                        <button class="btn-cancel" @onclick="() => CancelEditForum(forum.Id)">Cancel</button>
                    </div>
                </div>
            }
            else
            {
                <ForumInfo Forum="forum" />
                <ForumButtons Forum="forum"
                              OnNavigateToForum="NavigateToForum" OnToggleDeleteForum="ConfirmDeleteForum" OnToggleEditForum="StartEditingForum" UserId="userId" />
            }

        </div>
    }


    <nav aria-label="Topic navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(forumPage == 1 ? "disabled" : "")">
                <button class="page-link" disabled="@(forumPage == 1)" @onclick="@(forumPage == 1 ? null : (() => NavigateToPage(forumPage - 1)))">Previous</button>
            </li>

            @for (int i = 1; i <= totalPages; i++)
            {
                int localPageNumber = i;
                <li class="page-item @(forumPage == localPageNumber ? "active" : "")">
                    <button class="page-link" @onclick="(() => NavigateToPage(localPageNumber))">@localPageNumber</button>
                </li>
            }

            <li class="page-item @(forumPage == totalPages ? "disabled" : "")">
                <button class="page-link" disabled="@(forumPage == totalPages)" @onclick="@(forumPage == totalPages ? null : (() => NavigateToPage(forumPage + 1)))">Next</button>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter] public int forumPage { get; set; }
    private List<ForumResult> Forums = new();
    private Dictionary<int, string> editTopicTitles = new Dictionary<int, string>();



    private int totalPages;
    private int? userId;
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        if (forumPage == 0)
            forumPage = 1;
        var authState = await AuthService.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity.IsAuthenticated;
        if (isAuthenticated)
            userId = JwtService.GetIdFromClaims(authState.User.Claims);
        else
            userId = null;

        await LoadForums();

    }

    private async Task LoadForums()
    {
        var response = await ForumService.GetForums(forumPage);
        if (response.IsSuccess)
        {
            Forums = response.Result.ToList();
            totalPages = response.TotalPages;
        }
        else
        {
            totalPages = 1;
        }

    }

    private async Task SubmitForum(CreateForumModelDto createForumModelDto)
    {
        var result = await ForumService.CreateForum(createForumModelDto);
        if (result.IsSuccess)
        {
            await LoadForums();
        }

    }

    private void StartEditingForum(UpdateForumDto updateforumDto)
    {
        editTopicTitles[updateforumDto.Id] = updateforumDto.Title;
    }

    private async Task CancelEditForum(int topicId)
    {
        editTopicTitles.Remove(topicId);
    }


    private async Task SubmitEditForum(int topicId)
    {
        if (editTopicTitles.TryGetValue(topicId, out var editedBody) && !string.IsNullOrEmpty(editedBody))
        {
            var result = await ForumService.UpdateForum(new UpdateForumDto(topicId, editedBody));
            if (result.IsSuccess)
            {
                editTopicTitles.Remove(topicId);
                await LoadForums();
            }
            else
            {
                editTopicTitles[topicId] = result.Message;
            }
        }
    }


    private async Task ConfirmDeleteForum(int forumId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this Forum?");
        if (confirmed)
        {
            await DeleteForum(forumId);
        }
    }
    private async Task DeleteForum(int forumid)
    {
        var response = await ForumService.DeleteForumFromUser(forumid);
        if (response.IsSuccess)
        {
            await LoadForums();
        }
    }

    private async Task NavigateToPage(int page)
    {
        forumPage = page;
        Navigation.NavigateTo($"/{page}");
        await LoadForums();
    }
    private void NavigateToForum(int forumId)
    {
        Navigation.NavigateTo($"{forumPage}/{forumId}/topics");
    }
}