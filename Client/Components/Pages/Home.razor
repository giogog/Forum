@page "/{urlPage:int?}"
@using Microsoft.AspNetCore.Components.Authorization
@inject ITopicService TopicService
@inject IAuthenticationService AuthService
@inject IJwtService JwtService
@inject ICommentService CommentService
@inject IUpvoteService UpvoteService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime;

<PageTitle>Forum Topics</PageTitle>

<AuthorizeView>
    <Authorized>
        <CreateTopicForm OnValidSubmit="SubmitTopic" />
    </Authorized>
    <NotAuthorized>
        <p>Authorize to create topic</p>
    </NotAuthorized>
</AuthorizeView>

@if (topicsWithContent != null && topicsWithContent.Any())
{
    @foreach (var topic in topicsWithContent)
    {
        <div class="topic">
            
            @if (editTopicBodies.ContainsKey(topic.Id))
            {
                <div class="edit-topic">
                    <textarea class="edit-title" @bind="editTopicTitles[topic.Id]"></textarea>
                    <textarea class="edit-body" @bind="editTopicBodies[topic.Id]"></textarea>
                    <div class="edit-buttons">
                        <button class="btn-submit" @onclick="() => SubmitEditTopic(topic.Id)">Submit</button>
                        <button class="btn-cancel" @onclick="() => CancelEditTopic(topic.Id)">Cancel</button>
                    </div>
                </div>
            }
            else
            {
                <TopicInfo Topic="topic" />
                <TopicButtons Topic="topic"
                              OnToggleComments="GoToDetails" OnToggleAddComment="GoToDetails"
                              NavigateToLogin="NavigateToLogin" OnDeleteTopic="ConfirmDeleteTopic" OnToggleEditTopic="EditTopic" 
                              OnUpVote="UpVote"  UserId="userId" InDetailedView="false" />
            }


        </div>
    }

    <!-- Pagination controls -->
    <nav aria-label="Topic navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(urlPage == 1 ? "disabled" : "")">
                <button class="page-link" disabled="@(urlPage == 1)" @onclick="@(urlPage == 1 ? null : (() => NavigateToPage(urlPage - 1)))">Previous</button>
            </li>

            @for (int i = 1; i <= totalPages; i++)
            {
                int localPageNumber = i;
                <li class="page-item @(urlPage == localPageNumber ? "active" : "")">
                    <button class="page-link" @onclick="(() => NavigateToPage(localPageNumber))">@localPageNumber</button>
                </li>
            }

            <li class="page-item @(urlPage == totalPages ? "disabled" : "")">
                <button class="page-link" disabled="@(urlPage == totalPages)" @onclick="@(urlPage == totalPages ? null : (() => NavigateToPage(urlPage + 1)))">Next</button>
            </li>
        </ul>
    </nav>

}

@code {
    [Parameter] public int urlPage { get; set; }
    private IEnumerable<TopicWithContentResult>? topicsWithContent;
    private Dictionary<int, string> editTopicTitles = new Dictionary<int, string>();
    private Dictionary<int, string> editTopicBodies = new Dictionary<int, string>();
    private bool isAuthenticated;
    private string? errorMessage;
    private int? userId;
    private int totalPages;
    private int UpVoteNum;



    protected override async Task OnInitializedAsync()
    {
        if (urlPage == 0)
            urlPage = 1;

        var authState = await AuthService.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity.IsAuthenticated;
        if (isAuthenticated)
            userId = JwtService.GetIdFromClaims(authState.User.Claims);
        else
            userId = null;

        await LoadTopics(urlPage);
    }


    private async Task LoadTopics(int page)
    {
        var response = await TopicService.GetTopicsWithContent(page);
        if (response.IsSuccess)
        {
            topicsWithContent = response.Result.OrderByDescending(t => t.UpvotesNum).ThenByDescending(t=>t.Created).ToList();
            totalPages = response.TotalPages;
            urlPage = page;
            
        }
        else if(response.StatusCode == 404)
        {
            topicsWithContent=null;
        }
    }

    private void GoToDetails(int topicId)
    {
        Navigation.NavigateTo($"{urlPage}/topic/{topicId}");
    }


    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    private async Task NavigateToPage(int page)
    {
        Navigation.NavigateTo($"/{page}");
        await LoadTopics(page);
    }


    private async Task SubmitTopic(TopicModelDto topic)
    {
        var result = await TopicService.AddTopic(topic);
        if (result.IsSuccess)
        {
            await LoadTopics(urlPage);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
    private async Task EditTopic(UpdateTopicModelDto updateTopicModelDto)
    {
        editTopicTitles[updateTopicModelDto.id] = updateTopicModelDto.Title;
        editTopicBodies[updateTopicModelDto.id] = updateTopicModelDto.body;
    }

    private async Task CancelEditTopic(int topicId)
    {
        editTopicBodies.Remove(topicId);
    }

    private async Task SubmitEditTopic(int topicId)
    {
        if (editTopicTitles.TryGetValue(topicId, out var editedTitle) && !string.IsNullOrEmpty(editedTitle) && editTopicBodies.TryGetValue(topicId, out var editedBody) && !string.IsNullOrEmpty(editedBody))
        {
            var result = await TopicService.EditTopic(new UpdateTopicModelDto(topicId, editedTitle, editedBody));
            if (result.IsSuccess)
            {
                editTopicBodies.Remove(topicId);
                await LoadTopics(urlPage);
            }
            else
            {
                errorMessage = result.Message;
            }
        }
    }

    private async Task ConfirmDeleteTopic(int commentId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this Topic?");
        if (confirmed)
        {
            await DeleteTopic(commentId);
        }
    }

    private async Task DeleteTopic(int topicId)
    {
        var result = await TopicService.DeleteTopic(topicId);
        if (result.IsSuccess)
        {
            await LoadTopics(urlPage);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
    private async Task UpVote(int topicId)
    {
        var result = await UpvoteService.Upvote(topicId);
        if (result.IsSuccess)
        {
            await LoadTopics(urlPage);
        }
        else
        {
            errorMessage = result.Message;
        }
    }


}

